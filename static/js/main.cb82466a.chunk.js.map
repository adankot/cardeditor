{"version":3,"sources":["Editor.jsx","App.js","serviceWorker.js","index.js"],"names":["Editor","props","state","name","cost","description","type","image","attack","health","movement","cardRef","React","createRef","className","id","onChange","event","setState","target","value","onClick","html2canvas","current","then","canvas","console","log","newImage","toDataURL","saveAs","catch","err","ref","this","style","backgroundImage","backgroundSize","backgroundPosition","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cb82466a.chunk.js","sourcesContent":["import React from 'react';\nimport './Editor.css';\nimport html2canvas from 'html2canvas';\nimport { saveAs } from 'file-saver';\n\nclass Editor extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tname: '',\n\t\t\tcost: '',\n\t\t\tdescription: '',\n\t\t\ttype: '',\n\t\t\timage: '',\n\t\t\tattack: '',\n\t\t\thealth: '',\n\t\t\tmovement: ''\n\t\t};\n\t\tthis.cardRef = React.createRef();\n\t}\n\n\trender() {\n\n\t\tconst onSave = () => {\n\t\t\thtml2canvas(this.cardRef.current)\n\t\t\t\t.then((canvas) => {\n\t\t\t\t\tconsole.log('MENTÃ‰S', this.cardRef.current);\n\t\t\t\t\tconst newImage = canvas.toDataURL('image/png');\n\t\t\t\t\treturn saveAs(newImage, `${this.state.name}.png`);\n\t\t\t\t}).catch(err => {\n\t\t\t\tconsole.log('err: ', err);\n\t\t\t});\n\t\t};\n\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"fields-container\">\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<div className=\"FormField\">\n\t\t\t\t\t\t\t<label>Name</label>\n\t\t\t\t\t\t\t<input id=\"card-name\" className=\"FormText\"\n\t\t\t\t\t\t\t       onChange={event => this.setState({ name: event.target.value })}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"FormField\">\n\t\t\t\t\t\t\t<label>Cost</label>\n\t\t\t\t\t\t\t<input id=\"card-cost\" className=\"FormText\"\n\t\t\t\t\t\t\t       onChange={event => this.setState({ cost: event.target.value })}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"FormField\">\n\t\t\t\t\t\t\t<label>Type</label>\n\t\t\t\t\t\t\t<input id=\"card-type\" className=\"FormText\"\n\t\t\t\t\t\t\t       onChange={event => this.setState({ type: event.target.value })}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"FormField\">\n\t\t\t\t\t\t\t<label>Image URL</label>\n\t\t\t\t\t\t\t<input id=\"card-image\" className=\"FormText\"\n\t\t\t\t\t\t\t       onChange={event => this.setState({ image: event.target.value })}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"FormField\">\n\t\t\t\t\t\t\t<label>Description</label>\n\t\t\t\t\t\t\t<input id=\"card-description\" className=\"FormText\"\n\t\t\t\t\t\t\t       onChange={event => this.setState({ description: event.target.value })}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"FormField\">\n\t\t\t\t\t\t\t<label>Attack</label>\n\t\t\t\t\t\t\t<input id=\"card-attack\" className=\"FormText\"\n\t\t\t\t\t\t\t       onChange={event => this.setState({ attack: event.target.value })}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"FormField\">\n\t\t\t\t\t\t\t<label>Health</label>\n\t\t\t\t\t\t\t<input id=\"card-health\" className=\"FormText\"\n\t\t\t\t\t\t\t       onChange={event => this.setState({ health: event.target.value })}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"FormField\">\n\t\t\t\t\t\t\t<label>Movement</label>\n\t\t\t\t\t\t\t<input id=\"card-movement\" className=\"FormText\"\n\t\t\t\t\t\t\t       onChange={event => this.setState({ movement: event.target.value })}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"FormField\">\n\t\t\t\t\t\t\t<button id=\"download\" onClick={onSave}>\n\t\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"card-container\" ref={this.cardRef}>\n\t\t\t\t\t<div id=\"card\">\n\t\t\t\t\t\t<div className=\"image\" id=\"card-image\" style={{\n\t\t\t\t\t\t\tbackgroundImage: `url(${this.state.image})`,\n\t\t\t\t\t\t\tbackgroundSize: \"cover\",\n\t\t\t\t\t\t\tbackgroundPosition: \"center center\"\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"icon\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{this.state.cost}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"name\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{this.state.name}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"icon\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{this.state.type}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"rarity\">O</div>\n\t\t\t\t\t\t<div className=\"description\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{this.state.description}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"attack\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{this.state.attack}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"movement\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{this.state.movement}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"health\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{this.state.health}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t};\n};\n\nexport default Editor;\n","import React from 'react';\nimport './App.css';\nimport Editor from './Editor';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Editor />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}