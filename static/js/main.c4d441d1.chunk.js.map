{"version":3,"sources":["Editor.jsx","App.js","serviceWorker.js","index.js"],"names":["Editor","props","state","name","cost","description","type","image","image_data","attack","health","movement","rarity","cardRef","React","createRef","input","this","setState","undefined","length","axios","get","responseType","then","response","Buffer","from","data","toString","catch","err","console","log","className","id","onChange","event","target","value","getImage","style","height","display","alignItems","float","onClick","e","preventDefault","html2canvas","current","canvas","newImage","toDataURL","saveAs","ref","grid","src","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c4d441d1.chunk.js","sourcesContent":["import React from 'react';\nimport './Editor.css';\nimport html2canvas from 'html2canvas';\nimport { saveAs } from 'file-saver';\nimport axios from 'axios';\nimport Draggable from \"react-draggable\";\n\nclass Editor extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tname: '',\n\t\t\tcost: '',\n\t\t\tdescription: '',\n\t\t\ttype: '',\n\t\t\timage: '',\n\t\t\timage_data: '',\n\t\t\tattack: '',\n\t\t\thealth: '',\n\t\t\tmovement: '',\n\t\t\trarity: ''\n\t\t};\n\t\tthis.cardRef = React.createRef();\n\t}\n\n\tgetImage(input) {\n\t\tthis.setState({ image: input })\n\n\t\tif (input !== undefined && input.length > 10) { // @TODO: URL CHECK\n\t\t\tconst res = axios\n\t\t\t\t.get(input, { responseType: 'arraybuffer' })\n\t\t\t\t.then(response => Buffer.from(response.data, 'binary').toString('base64') )\n\t\t\t\t.then(data => this.setState({ image_data: data }))\n\t\t\t\t.catch(err => {\n\t\t\t\t\tconsole.log('err: ', err)\n\t\t\t})\n\t\t}\n\t}\n\n\trender() {\n\t\tconst image_data = `data:image/png;base64, ${this.state.image_data}`;\n\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"fields-container\">\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<div className=\"FormFieldTopLeft\">\n\t\t\t\t\t\t<div className=\"rowContainer\">\n\t\t\t\t\t\t\t<label className=\"labelTop\">Name</label></div>\n\t\t\t\t\t\t\t<div className=\"rowContainer\">\n\t\t\t\t\t\t\t<label className=\"labelTop\">Cost</label></div>\n\t\t\t\t\t\t\t<div className=\"rowContainer\">\n\t\t\t\t\t\t\t<label className=\"labelTop\">Type</label></div>\n\t\t\t\t\t\t\t<div className=\"rowContainer\">\n\t\t\t\t\t\t\t<label className=\"labelTop\">Image URL</label></div>\n\t\t\t\t\t\t\t<div className=\"rowContainer\">\n\t\t\t\t\t\t\t<label className=\"labelTop\">Attack</label></div>\n\t\t\t\t\t\t\t<div className=\"rowContainer\">\n\t\t\t\t\t\t\t<label className=\"labelTop\">Health</label></div>\n\t\t\t\t\t\t\t<div className=\"rowContainer\">\n\t\t\t\t\t\t\t<label className=\"labelTop\">Movement</label></div>\n\t\t\t\t\t\t\t<div className=\"rowContainer\">\n\t\t\t\t\t\t\t<label className=\"labelTop\">Rarity</label></div>\n\t\t\t\t\t\t\t<div className=\"rowContainer\">\n\t\t\t\t\t\t\t<label className=\"labelTop\">Description</label></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t \t<div className=\"FormFieldTopRight\">\n\t\t\t\t\t\t\t<div className=\"rowContainer\">\n\t\t\t\t\t\t\t<input id=\"card-name\" className=\"FormText\"\n\t\t\t\t\t\t\t\t\t \tonChange={event => this.setState({ name: event.target.value })}/></div>\n\t\t\t\t\t\t\t<div className=\"rowContainer\">\n\t\t\t\t\t\t\t<input id=\"card-cost\" className=\"FormText\"\n\t\t\t\t\t\t\t     \tonChange={event => this.setState({ cost: event.target.value })}/></div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"rowContainer\">\n\t\t\t \t\t\t\t<input id=\"card-type\" className=\"FormText\"\n\t\t\t \t\t\t\t\t\t \tonChange={event => this.setState({ type: event.target.value })}/></div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"rowContainer\">\n\t\t\t \t\t\t\t<input id=\"card-name\" className=\"FormText\"\n\t\t\t \t\t\t\t\t\t\tonChange={event => this.getImage(event.target.value)}/></div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"rowContainer\">\n\t\t\t \t\t\t\t<input id=\"card-cost\" className=\"FormText\"\n\t\t\t \t\t\t\t\t\t\tonChange={event => this.setState({ attack: event.target.value })}/></div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"rowContainer\">\n\t\t\t \t\t\t \t<input id=\"card-type\" className=\"FormText\"\n\t\t\t \t\t\t \t\t\t\tonChange={event => this.setState({ health: event.target.value })}/></div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"rowContainer\">\n\t\t\t \t\t\t \t<input id=\"card-type\" className=\"FormText\"\n\t\t\t \t\t\t \t\t\t\tonChange={event => this.setState({ movement: event.target.value })}/></div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"rowContainer\">\n\t\t\t \t\t\t \t<input id=\"card-type\" className=\"FormText\"\n\t\t\t \t\t\t \t\t\t\tonChange={event => this.setState({ rarity: event.target.value })}/></div>\n\t\t\t\t\t\t\t<textarea id=\"card-description\" className=\"formTextfield\"\n\t\t\t\t\t\t\t\t\t\tonChange={event => this.setState({ description: event.target.value })}/>\n\t\t\t\t\t\t\t<div style={{\n\t\t\t\t\t\t\t  height: \"40px\",\n\t\t\t\t\t\t\t  display: \"flex\",\n\t\t\t\t\t\t\t  alignItems: \"center\",\n\t\t\t\t\t\t\tfloat: \"right\"}}>\n\t\t\t\t\t\t\t<button id=\"download\" onClick={\n\t\t\t\t\t\t\t\t(e) => {\n\t\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\t\thtml2canvas(this.cardRef.current)\n\t\t\t\t\t\t\t\t\t\t.then((canvas) => {\n\t\t\t\t\t\t\t\t\t\t\tconsole.log('MENTÃ‰S', this.cardRef.current);\n\t\t\t\t\t\t\t\t\t\t\tconst newImage = canvas.toDataURL('image/png');\n\t\t\t\t\t\t\t\t\t\t\treturn saveAs(newImage, `${this.state.name}.png`);\n\t\t\t\t\t\t\t\t\t\t}).catch(err => {\n\t\t\t\t\t\t\t\t\t\tconsole.log('err: ', err);\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"card-container\" ref={this.cardRef}>\n\t\t\t\t\t<div id=\"card\">\n\t\t\t\t\t\t<Draggable grid={ [50, 50]}>\n\t\t\t\t\t\t\t<img className=\"card-image\" src={image_data} />\n\t\t\t\t\t\t</Draggable>\n\t\t\t\t\t\t<Draggable grid={ [50, 50]}>\n\t\t\t\t\t\t<div className=\"icon\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{this.state.cost}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Draggable>\n\t\t\t\t\t\t<Draggable grid={ [50, 50]}>\n\t\t\t\t\t\t<div className=\"name\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{this.state.name}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Draggable>\n\t\t\t\t\t\t<Draggable grid={ [50, 50]}>\n\t\t\t\t\t\t<div className=\"icon\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{this.state.type}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Draggable>\n\t\t\t\t\t\t<Draggable grid={ [50, 50]}>\n\t\t\t\t\t\t<div className=\"icon\">\n\t\t\t\t\t\t\t<div className=\"rarity\">\n\t\t\t\t\t\t\t\t{this.state.rarity}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Draggable>\n\t\t\t\t\t\t<Draggable grid={ [50, 50]}>\n\t\t\t\t\t\t<div className=\"description\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{this.state.description}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Draggable>\n\t\t\t\t\t\t<Draggable grid={ [50, 50]}>\n\t\t\t\t\t\t<div className=\"attack\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{this.state.attack}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Draggable>\n\t\t\t\t\t\t<Draggable grid={ [50, 50]}>\n\t\t\t\t\t\t<div className=\"movement\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{this.state.movement}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Draggable>\n\t\t\t\t\t\t<Draggable grid={ [50, 50]}>\n\t\t\t\t\t\t\t<div className=\"health\">\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t{this.state.health}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Draggable>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t};\n};\n\nexport default Editor;\n","import React from 'react';\nimport './App.css';\nimport Editor from './Editor';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Editor />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}